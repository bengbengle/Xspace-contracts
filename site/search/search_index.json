{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"core/Auction/","text":"Auction factory address factory govTokens mapping(address => bool) govTokens PublicOffer struct PublicOffer { bool isActive; address currency; uint256 rate; } publicOffers mapping(address => struct Auction.PublicOffer) publicOffers PrivateOffer struct PrivateOffer { bool isActive; address recipient; address currency; uint256 currencyAmount; uint256 amount; } privateOffers mapping(address => mapping(uint256 => struct Auction.PrivateOffer)) privateOffers numberOfPrivateOffers mapping(address => uint256) numberOfPrivateOffers GovTokenCreated event GovTokenCreated(address govToken) onlyDaoWithGovToken modifier onlyDaoWithGovToken() setFactory function setFactory(address _factory) external returns (bool) setup factory address factory address is used to point to the factory contract Name Type Description _factory address The address of the factory createGovToken function createGovToken(string _name, string _symbol) external returns (bool) create new GovToken create new GovToken Name Type Description _name string The name of the GovToken _symbol string The symbol of the GovToken initPublicOffer function initPublicOffer(bool _isActive, address _currency, uint256 _rate) external returns (bool) create a public offer DAO can use this to create/enable/disable/changeCurrency/changeRate Name Type Description _isActive bool true to enable, false to disable _currency address currency address _rate uint256 rate createPrivateOffer function createPrivateOffer(address _recipient, address _currency, uint256 _currencyAmount, uint256 _amount) external returns (bool) create private offer with _recipient address DAO can use this to create/enable/disable/changeCurrency/changeRate, isActive is default set true Name Type Description _recipient address recipient address _currency address currency address _currencyAmount uint256 currency amount _amount uint256 amount disablePrivateOffer function disablePrivateOffer(uint256 _id) external returns (bool) disablePrivateOffer Name Type Description _id uint256 offer id buyPublicOffer function buyPublicOffer(address _dao, uint256 _amount) external returns (bool) buy a public offer only DAO can sell GovTokens Name Type Description _dao address DAO address _amount uint256 amount buyPrivateOffer function buyPrivateOffer(address _dao, uint256 _id) external returns (bool) buy a private offer only DAO can sell GovTokens Name Type Description _dao address DAO address _id uint256 offer id","title":"Auction"},{"location":"core/Auction/#auction","text":"","title":"Auction"},{"location":"core/Auction/#factory","text":"address factory","title":"factory"},{"location":"core/Auction/#govtokens","text":"mapping(address => bool) govTokens","title":"govTokens"},{"location":"core/Auction/#publicoffer","text":"struct PublicOffer { bool isActive; address currency; uint256 rate; }","title":"PublicOffer"},{"location":"core/Auction/#publicoffers","text":"mapping(address => struct Auction.PublicOffer) publicOffers","title":"publicOffers"},{"location":"core/Auction/#privateoffer","text":"struct PrivateOffer { bool isActive; address recipient; address currency; uint256 currencyAmount; uint256 amount; }","title":"PrivateOffer"},{"location":"core/Auction/#privateoffers","text":"mapping(address => mapping(uint256 => struct Auction.PrivateOffer)) privateOffers","title":"privateOffers"},{"location":"core/Auction/#numberofprivateoffers","text":"mapping(address => uint256) numberOfPrivateOffers","title":"numberOfPrivateOffers"},{"location":"core/Auction/#govtokencreated","text":"event GovTokenCreated(address govToken)","title":"GovTokenCreated"},{"location":"core/Auction/#onlydaowithgovtoken","text":"modifier onlyDaoWithGovToken()","title":"onlyDaoWithGovToken"},{"location":"core/Auction/#setfactory","text":"function setFactory(address _factory) external returns (bool) setup factory address factory address is used to point to the factory contract Name Type Description _factory address The address of the factory","title":"setFactory"},{"location":"core/Auction/#creategovtoken","text":"function createGovToken(string _name, string _symbol) external returns (bool) create new GovToken create new GovToken Name Type Description _name string The name of the GovToken _symbol string The symbol of the GovToken","title":"createGovToken"},{"location":"core/Auction/#initpublicoffer","text":"function initPublicOffer(bool _isActive, address _currency, uint256 _rate) external returns (bool) create a public offer DAO can use this to create/enable/disable/changeCurrency/changeRate Name Type Description _isActive bool true to enable, false to disable _currency address currency address _rate uint256 rate","title":"initPublicOffer"},{"location":"core/Auction/#createprivateoffer","text":"function createPrivateOffer(address _recipient, address _currency, uint256 _currencyAmount, uint256 _amount) external returns (bool) create private offer with _recipient address DAO can use this to create/enable/disable/changeCurrency/changeRate, isActive is default set true Name Type Description _recipient address recipient address _currency address currency address _currencyAmount uint256 currency amount _amount uint256 amount","title":"createPrivateOffer"},{"location":"core/Auction/#disableprivateoffer","text":"function disablePrivateOffer(uint256 _id) external returns (bool) disablePrivateOffer Name Type Description _id uint256 offer id","title":"disablePrivateOffer"},{"location":"core/Auction/#buypublicoffer","text":"function buyPublicOffer(address _dao, uint256 _amount) external returns (bool) buy a public offer only DAO can sell GovTokens Name Type Description _dao address DAO address _amount uint256 amount","title":"buyPublicOffer"},{"location":"core/Auction/#buyprivateoffer","text":"function buyPrivateOffer(address _dao, uint256 _id) external returns (bool) buy a private offer only DAO can sell GovTokens Name Type Description _dao address DAO address _id uint256 offer id","title":"buyPrivateOffer"},{"location":"core/Dao/","text":"Dao VOTING_DURATION uint32 VOTING_DURATION permitted struct EnumerableSet.AddressSet permitted permittedSpaceId string permittedSpaceId adapters struct EnumerableSet.AddressSet adapters factory address factory govToken address govToken quorum uint8 quorum ExecutedVoting struct ExecutedVoting { address target; bytes data; uint256 value; uint256 nonce; uint256 timestamp; uint256 executionTimestamp; bytes32 txHash; bytes[] sigs; } executedVoting struct Dao.ExecutedVoting[] executedVoting executedTx mapping(bytes32 => bool) executedTx ExecutedPermitted struct ExecutedPermitted { address target; bytes data; uint256 value; uint256 executionTimestamp; address executor; } executedPermitted struct Dao.ExecutedPermitted[] executedPermitted mintable bool mintable burnable bool burnable Executed event Executed(address target, bytes data, uint256 value, uint256 nonce, uint256 timestamp, uint256 executionTimestamp, bytes32 txHash, bytes[] sigs) ExecutedPermittedEvent event ExecutedPermittedEvent(address target, bytes data, uint256 value, address executor) onlyDao modifier onlyDao() constructor constructor(string _name, string _symbol, uint8 _quorum, address[] _partners, uint256[] _shares) public executePermitted function executePermitted(address _target, bytes _data, uint256 _value) external returns (bool) execute function execute(address _target, bytes _data, uint256 _value, uint256 _nonce, uint256 _timestamp, bytes[] _sigs) external returns (bool) getTxHash function getTxHash(address _target, bytes _data, uint256 _value, uint256 _nonce, uint256 _timestamp) public view returns (bytes32) _checkSigs function _checkSigs(bytes[] _sigs, bytes32 _txHash) internal view returns (bool) burnGovToken function burnGovToken(address _recipient, uint256 _share, address[] _tokens) external returns (bool) addOwner function addOwner(address _to) external returns (bool) deleteOwner function deleteOwner(address _to) external returns (bool) updateOwner function updateOwner(address _sender, address _recipient) external returns (bool) mint function mint(address _to, uint256 _amount) external returns (bool) burn function burn(address _to, uint256 _amount) external returns (bool) move function move(address _sender, address _recipient, uint256 _amount) external returns (bool) disableMinting function disableMinting() external returns (bool) disableBurning function disableBurning() external returns (bool) addAdapter function addAdapter(address _adapter) external returns (bool) removeAdapter function removeAdapter(address _adapter) external returns (bool) addPermitted function addPermitted(address p) external returns (bool) removePermitted function removePermitted(address p) external returns (bool) setPermittedSpaceId function setPermittedSpaceId(string _spaceId) external returns (bool) setGovToken function setGovToken(address _govToken) external returns (bool) setFactory function setFactory(address _factory) external returns (bool) changeQuorum function changeQuorum(uint8 _quorum) external returns (bool) executedVotingByIndex function executedVotingByIndex(uint256 _index) external view returns (struct Dao.ExecutedVoting) getExecutedVoting function getExecutedVoting() external view returns (struct Dao.ExecutedVoting[]) getExecutedPermitted function getExecutedPermitted() external view returns (struct Dao.ExecutedPermitted[]) numberOfAdapters function numberOfAdapters() external view returns (uint256) containsAdapter function containsAdapter(address a) external view returns (bool) getAdapters function getAdapters() external view returns (address[]) numberOfPermitted function numberOfPermitted() external view returns (uint256) containsPermitted function containsPermitted(address p) external view returns (bool) getPermitted function getPermitted() external view returns (address[]) _hasDuplicate function _hasDuplicate(address[] _list) internal pure returns (bool) transfer function transfer(address, uint256) public pure returns (bool) transferFrom function transferFrom(address, address, uint256) public pure returns (bool) Received event Received(address, uint256) receive receive() external payable onERC1155Received function onERC1155Received(address, address, uint256, uint256, bytes) external pure returns (bytes4) onERC1155BatchReceived function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) external pure returns (bytes4) onERC721Received function onERC721Received(address, address, uint256, bytes) external pure returns (bytes4) tokensReceived function tokensReceived(address, address, address, uint256, bytes, bytes) external pure supportsInterface function supportsInterface(bytes4 interfaceId) external view virtual returns (bool)","title":"Dao"},{"location":"core/Dao/#dao","text":"","title":"Dao"},{"location":"core/Dao/#voting_duration","text":"uint32 VOTING_DURATION","title":"VOTING_DURATION"},{"location":"core/Dao/#permitted","text":"struct EnumerableSet.AddressSet permitted","title":"permitted"},{"location":"core/Dao/#permittedspaceid","text":"string permittedSpaceId","title":"permittedSpaceId"},{"location":"core/Dao/#adapters","text":"struct EnumerableSet.AddressSet adapters","title":"adapters"},{"location":"core/Dao/#factory","text":"address factory","title":"factory"},{"location":"core/Dao/#govtoken","text":"address govToken","title":"govToken"},{"location":"core/Dao/#quorum","text":"uint8 quorum","title":"quorum"},{"location":"core/Dao/#executedvoting","text":"struct ExecutedVoting { address target; bytes data; uint256 value; uint256 nonce; uint256 timestamp; uint256 executionTimestamp; bytes32 txHash; bytes[] sigs; }","title":"ExecutedVoting"},{"location":"core/Dao/#executedvoting_1","text":"struct Dao.ExecutedVoting[] executedVoting","title":"executedVoting"},{"location":"core/Dao/#executedtx","text":"mapping(bytes32 => bool) executedTx","title":"executedTx"},{"location":"core/Dao/#executedpermitted","text":"struct ExecutedPermitted { address target; bytes data; uint256 value; uint256 executionTimestamp; address executor; }","title":"ExecutedPermitted"},{"location":"core/Dao/#executedpermitted_1","text":"struct Dao.ExecutedPermitted[] executedPermitted","title":"executedPermitted"},{"location":"core/Dao/#mintable","text":"bool mintable","title":"mintable"},{"location":"core/Dao/#burnable","text":"bool burnable","title":"burnable"},{"location":"core/Dao/#executed","text":"event Executed(address target, bytes data, uint256 value, uint256 nonce, uint256 timestamp, uint256 executionTimestamp, bytes32 txHash, bytes[] sigs)","title":"Executed"},{"location":"core/Dao/#executedpermittedevent","text":"event ExecutedPermittedEvent(address target, bytes data, uint256 value, address executor)","title":"ExecutedPermittedEvent"},{"location":"core/Dao/#onlydao","text":"modifier onlyDao()","title":"onlyDao"},{"location":"core/Dao/#constructor","text":"constructor(string _name, string _symbol, uint8 _quorum, address[] _partners, uint256[] _shares) public","title":"constructor"},{"location":"core/Dao/#executepermitted","text":"function executePermitted(address _target, bytes _data, uint256 _value) external returns (bool)","title":"executePermitted"},{"location":"core/Dao/#execute","text":"function execute(address _target, bytes _data, uint256 _value, uint256 _nonce, uint256 _timestamp, bytes[] _sigs) external returns (bool)","title":"execute"},{"location":"core/Dao/#gettxhash","text":"function getTxHash(address _target, bytes _data, uint256 _value, uint256 _nonce, uint256 _timestamp) public view returns (bytes32)","title":"getTxHash"},{"location":"core/Dao/#_checksigs","text":"function _checkSigs(bytes[] _sigs, bytes32 _txHash) internal view returns (bool)","title":"_checkSigs"},{"location":"core/Dao/#burngovtoken","text":"function burnGovToken(address _recipient, uint256 _share, address[] _tokens) external returns (bool)","title":"burnGovToken"},{"location":"core/Dao/#addowner","text":"function addOwner(address _to) external returns (bool)","title":"addOwner"},{"location":"core/Dao/#deleteowner","text":"function deleteOwner(address _to) external returns (bool)","title":"deleteOwner"},{"location":"core/Dao/#updateowner","text":"function updateOwner(address _sender, address _recipient) external returns (bool)","title":"updateOwner"},{"location":"core/Dao/#mint","text":"function mint(address _to, uint256 _amount) external returns (bool)","title":"mint"},{"location":"core/Dao/#burn","text":"function burn(address _to, uint256 _amount) external returns (bool)","title":"burn"},{"location":"core/Dao/#move","text":"function move(address _sender, address _recipient, uint256 _amount) external returns (bool)","title":"move"},{"location":"core/Dao/#disableminting","text":"function disableMinting() external returns (bool)","title":"disableMinting"},{"location":"core/Dao/#disableburning","text":"function disableBurning() external returns (bool)","title":"disableBurning"},{"location":"core/Dao/#addadapter","text":"function addAdapter(address _adapter) external returns (bool)","title":"addAdapter"},{"location":"core/Dao/#removeadapter","text":"function removeAdapter(address _adapter) external returns (bool)","title":"removeAdapter"},{"location":"core/Dao/#addpermitted","text":"function addPermitted(address p) external returns (bool)","title":"addPermitted"},{"location":"core/Dao/#removepermitted","text":"function removePermitted(address p) external returns (bool)","title":"removePermitted"},{"location":"core/Dao/#setpermittedspaceid","text":"function setPermittedSpaceId(string _spaceId) external returns (bool)","title":"setPermittedSpaceId"},{"location":"core/Dao/#setgovtoken","text":"function setGovToken(address _govToken) external returns (bool)","title":"setGovToken"},{"location":"core/Dao/#setfactory","text":"function setFactory(address _factory) external returns (bool)","title":"setFactory"},{"location":"core/Dao/#changequorum","text":"function changeQuorum(uint8 _quorum) external returns (bool)","title":"changeQuorum"},{"location":"core/Dao/#executedvotingbyindex","text":"function executedVotingByIndex(uint256 _index) external view returns (struct Dao.ExecutedVoting)","title":"executedVotingByIndex"},{"location":"core/Dao/#getexecutedvoting","text":"function getExecutedVoting() external view returns (struct Dao.ExecutedVoting[])","title":"getExecutedVoting"},{"location":"core/Dao/#getexecutedpermitted","text":"function getExecutedPermitted() external view returns (struct Dao.ExecutedPermitted[])","title":"getExecutedPermitted"},{"location":"core/Dao/#numberofadapters","text":"function numberOfAdapters() external view returns (uint256)","title":"numberOfAdapters"},{"location":"core/Dao/#containsadapter","text":"function containsAdapter(address a) external view returns (bool)","title":"containsAdapter"},{"location":"core/Dao/#getadapters","text":"function getAdapters() external view returns (address[])","title":"getAdapters"},{"location":"core/Dao/#numberofpermitted","text":"function numberOfPermitted() external view returns (uint256)","title":"numberOfPermitted"},{"location":"core/Dao/#containspermitted","text":"function containsPermitted(address p) external view returns (bool)","title":"containsPermitted"},{"location":"core/Dao/#getpermitted","text":"function getPermitted() external view returns (address[])","title":"getPermitted"},{"location":"core/Dao/#_hasduplicate","text":"function _hasDuplicate(address[] _list) internal pure returns (bool)","title":"_hasDuplicate"},{"location":"core/Dao/#transfer","text":"function transfer(address, uint256) public pure returns (bool)","title":"transfer"},{"location":"core/Dao/#transferfrom","text":"function transferFrom(address, address, uint256) public pure returns (bool)","title":"transferFrom"},{"location":"core/Dao/#received","text":"event Received(address, uint256)","title":"Received"},{"location":"core/Dao/#receive","text":"receive() external payable","title":"receive"},{"location":"core/Dao/#onerc1155received","text":"function onERC1155Received(address, address, uint256, uint256, bytes) external pure returns (bytes4)","title":"onERC1155Received"},{"location":"core/Dao/#onerc1155batchreceived","text":"function onERC1155BatchReceived(address, address, uint256[], uint256[], bytes) external pure returns (bytes4)","title":"onERC1155BatchReceived"},{"location":"core/Dao/#onerc721received","text":"function onERC721Received(address, address, uint256, bytes) external pure returns (bytes4)","title":"onERC721Received"},{"location":"core/Dao/#tokensreceived","text":"function tokensReceived(address, address, address, uint256, bytes, bytes) external pure","title":"tokensReceived"},{"location":"core/Dao/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) external view virtual returns (bool)","title":"supportsInterface"},{"location":"core/Factory/","text":"Factory auction address auction DaoCreated event DaoCreated(address dao) daos struct EnumerableSet.AddressSet daos create function create(string _daoName, string _daoSymbol, uint8 _quorum, address[] _partners, uint256[] _shares) external returns (bool) create new DAO create new DAO Name Type Description _daoName string The name of the DAO _daoSymbol string The symbol of the Dao _quorum uint8 the mimimum quorum of the DAO _partners address[] The partners address of the DAO _shares uint256[] The shares of the each partners createMultiSigWallet function createMultiSigWallet(string _daoName, string _daoSymbol, uint8 _quorum, address[] _partners) external returns (bool) setupAuction function setupAuction(address _auction) external returns (bool) daoAt function daoAt(uint256 _i) external view returns (address) containsDao function containsDao(address _dao) external view returns (bool) numberOfDaos function numberOfDaos() external view returns (uint256) getDaos function getDaos() external view returns (address[])","title":"Factory"},{"location":"core/Factory/#factory","text":"","title":"Factory"},{"location":"core/Factory/#auction","text":"address auction","title":"auction"},{"location":"core/Factory/#daocreated","text":"event DaoCreated(address dao)","title":"DaoCreated"},{"location":"core/Factory/#daos","text":"struct EnumerableSet.AddressSet daos","title":"daos"},{"location":"core/Factory/#create","text":"function create(string _daoName, string _daoSymbol, uint8 _quorum, address[] _partners, uint256[] _shares) external returns (bool) create new DAO create new DAO Name Type Description _daoName string The name of the DAO _daoSymbol string The symbol of the Dao _quorum uint8 the mimimum quorum of the DAO _partners address[] The partners address of the DAO _shares uint256[] The shares of the each partners","title":"create"},{"location":"core/Factory/#createmultisigwallet","text":"function createMultiSigWallet(string _daoName, string _daoSymbol, uint8 _quorum, address[] _partners) external returns (bool)","title":"createMultiSigWallet"},{"location":"core/Factory/#setupauction","text":"function setupAuction(address _auction) external returns (bool)","title":"setupAuction"},{"location":"core/Factory/#daoat","text":"function daoAt(uint256 _i) external view returns (address)","title":"daoAt"},{"location":"core/Factory/#containsdao","text":"function containsDao(address _dao) external view returns (bool)","title":"containsDao"},{"location":"core/Factory/#numberofdaos","text":"function numberOfDaos() external view returns (uint256)","title":"numberOfDaos"},{"location":"core/Factory/#getdaos","text":"function getDaos() external view returns (address[])","title":"getDaos"},{"location":"core/GovNFT/","text":"MyToken _tokenIdCounter struct Counters.Counter _tokenIdCounter dao address dao auction address auction mintable bool mintable burnable bool burnable mintableStatusFrozen bool mintableStatusFrozen burnableStatusFrozen bool burnableStatusFrozen constructor constructor(string _name, string _symbol, address _dao) public onlyDao modifier onlyDao() _beforeTokenTransfer function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal supportsInterface function supportsInterface(bytes4 interfaceId) public view returns (bool) mint function mint(address _to) external returns (bool) burn function burn(uint256 _tokenId, address[] _tokens) external returns (bool) burn a new token for the given tokenid burn a new token for the given tokenid Name Type Description _tokenId uint256 The tokenId of the token to burn _tokens address[] The tokenids of tokens to burn Name Type Description [0] bool true if the token was burned, false otherwise changeMintable function changeMintable(bool _mintable) external returns (bool) changeBurnable function changeBurnable(bool _burnable) external returns (bool) freezeMintingStatus function freezeMintingStatus() external returns (bool) freezeBurningStatus function freezeBurningStatus() external returns (bool)","title":"GovNFT"},{"location":"core/GovNFT/#mytoken","text":"","title":"MyToken"},{"location":"core/GovNFT/#_tokenidcounter","text":"struct Counters.Counter _tokenIdCounter","title":"_tokenIdCounter"},{"location":"core/GovNFT/#dao","text":"address dao","title":"dao"},{"location":"core/GovNFT/#auction","text":"address auction","title":"auction"},{"location":"core/GovNFT/#mintable","text":"bool mintable","title":"mintable"},{"location":"core/GovNFT/#burnable","text":"bool burnable","title":"burnable"},{"location":"core/GovNFT/#mintablestatusfrozen","text":"bool mintableStatusFrozen","title":"mintableStatusFrozen"},{"location":"core/GovNFT/#burnablestatusfrozen","text":"bool burnableStatusFrozen","title":"burnableStatusFrozen"},{"location":"core/GovNFT/#constructor","text":"constructor(string _name, string _symbol, address _dao) public","title":"constructor"},{"location":"core/GovNFT/#onlydao","text":"modifier onlyDao()","title":"onlyDao"},{"location":"core/GovNFT/#_beforetokentransfer","text":"function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal","title":"_beforeTokenTransfer"},{"location":"core/GovNFT/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view returns (bool)","title":"supportsInterface"},{"location":"core/GovNFT/#mint","text":"function mint(address _to) external returns (bool)","title":"mint"},{"location":"core/GovNFT/#burn","text":"function burn(uint256 _tokenId, address[] _tokens) external returns (bool) burn a new token for the given tokenid burn a new token for the given tokenid Name Type Description _tokenId uint256 The tokenId of the token to burn _tokens address[] The tokenids of tokens to burn Name Type Description [0] bool true if the token was burned, false otherwise","title":"burn"},{"location":"core/GovNFT/#changemintable","text":"function changeMintable(bool _mintable) external returns (bool)","title":"changeMintable"},{"location":"core/GovNFT/#changeburnable","text":"function changeBurnable(bool _burnable) external returns (bool)","title":"changeBurnable"},{"location":"core/GovNFT/#freezemintingstatus","text":"function freezeMintingStatus() external returns (bool)","title":"freezeMintingStatus"},{"location":"core/GovNFT/#freezeburningstatus","text":"function freezeBurningStatus() external returns (bool)","title":"freezeBurningStatus"},{"location":"core/GovToken/","text":"GovToken dao address dao auction address auction mintable bool mintable burnable bool burnable mintableStatusFrozen bool mintableStatusFrozen burnableStatusFrozen bool burnableStatusFrozen constructor constructor(string _name, string _symbol, address _dao) public onlyDao modifier onlyDao() onlyDaoAuction modifier onlyDaoAuction() mint function mint(address _to, uint256 _amount) external returns (bool) burn function burn(uint256 _amount, address[] _tokens) external returns (bool) changeMintable function changeMintable(bool _mintable) external returns (bool) changeBurnable function changeBurnable(bool _burnable) external returns (bool) freezeMintingStatus function freezeMintingStatus() external returns (bool) freezeBurningStatus function freezeBurningStatus() external returns (bool)","title":"GovToken"},{"location":"core/GovToken/#govtoken","text":"","title":"GovToken"},{"location":"core/GovToken/#dao","text":"address dao","title":"dao"},{"location":"core/GovToken/#auction","text":"address auction","title":"auction"},{"location":"core/GovToken/#mintable","text":"bool mintable","title":"mintable"},{"location":"core/GovToken/#burnable","text":"bool burnable","title":"burnable"},{"location":"core/GovToken/#mintablestatusfrozen","text":"bool mintableStatusFrozen","title":"mintableStatusFrozen"},{"location":"core/GovToken/#burnablestatusfrozen","text":"bool burnableStatusFrozen","title":"burnableStatusFrozen"},{"location":"core/GovToken/#constructor","text":"constructor(string _name, string _symbol, address _dao) public","title":"constructor"},{"location":"core/GovToken/#onlydao","text":"modifier onlyDao()","title":"onlyDao"},{"location":"core/GovToken/#onlydaoauction","text":"modifier onlyDaoAuction()","title":"onlyDaoAuction"},{"location":"core/GovToken/#mint","text":"function mint(address _to, uint256 _amount) external returns (bool)","title":"mint"},{"location":"core/GovToken/#burn","text":"function burn(uint256 _amount, address[] _tokens) external returns (bool)","title":"burn"},{"location":"core/GovToken/#changemintable","text":"function changeMintable(bool _mintable) external returns (bool)","title":"changeMintable"},{"location":"core/GovToken/#changeburnable","text":"function changeBurnable(bool _burnable) external returns (bool)","title":"changeBurnable"},{"location":"core/GovToken/#freezemintingstatus","text":"function freezeMintingStatus() external returns (bool)","title":"freezeMintingStatus"},{"location":"core/GovToken/#freezeburningstatus","text":"function freezeBurningStatus() external returns (bool)","title":"freezeBurningStatus"},{"location":"interfaces/ERC1155TokenReceiver/","text":"ERC1155TokenReceiver onERC1155Received function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes _data) external returns (bytes4) onERC1155BatchReceived function onERC1155BatchReceived(address _operator, address _from, uint256[] _ids, uint256[] _values, bytes _data) external returns (bytes4)","title":"ERC1155TokenReceiver"},{"location":"interfaces/ERC1155TokenReceiver/#erc1155tokenreceiver","text":"","title":"ERC1155TokenReceiver"},{"location":"interfaces/ERC1155TokenReceiver/#onerc1155received","text":"function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes _data) external returns (bytes4)","title":"onERC1155Received"},{"location":"interfaces/ERC1155TokenReceiver/#onerc1155batchreceived","text":"function onERC1155BatchReceived(address _operator, address _from, uint256[] _ids, uint256[] _values, bytes _data) external returns (bytes4)","title":"onERC1155BatchReceived"},{"location":"interfaces/ERC721TokenReceiver/","text":"ERC721TokenReceiver onERC721Received function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns (bytes4)","title":"ERC721TokenReceiver"},{"location":"interfaces/ERC721TokenReceiver/#erc721tokenreceiver","text":"","title":"ERC721TokenReceiver"},{"location":"interfaces/ERC721TokenReceiver/#onerc721received","text":"function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns (bytes4)","title":"onERC721Received"},{"location":"interfaces/ERC777TokensRecipient/","text":"ERC777TokensRecipient tokensReceived function tokensReceived(address operator, address from, address to, uint256 amount, bytes data, bytes operatorData) external","title":"ERC777TokensRecipient"},{"location":"interfaces/ERC777TokensRecipient/#erc777tokensrecipient","text":"","title":"ERC777TokensRecipient"},{"location":"interfaces/ERC777TokensRecipient/#tokensreceived","text":"function tokensReceived(address operator, address from, address to, uint256 amount, bytes data, bytes operatorData) external","title":"tokensReceived"},{"location":"interfaces/IAdapter/","text":"IAdapter withdraw function withdraw(address _recipient, address _pool, uint256 _share) external returns (bool)","title":"IAdapter"},{"location":"interfaces/IAdapter/#iadapter","text":"","title":"IAdapter"},{"location":"interfaces/IAdapter/#withdraw","text":"function withdraw(address _recipient, address _pool, uint256 _share) external returns (bool)","title":"withdraw"},{"location":"interfaces/IAuction/","text":"IAuction PublicOffer struct PublicOffer { bool isActive; address currency; uint256 rate; } publicOffers function publicOffers(address _dao) external view returns (struct IAuction.PublicOffer) PrivateOffer struct PrivateOffer { bool isActive; address recipient; address currency; uint256 currencyAmount; uint256 amount; } privateOffers function privateOffers(address _dao, uint256 _index) external view returns (struct IAuction.PrivateOffer) numberOfPrivateOffers function numberOfPrivateOffers(address _dao) external view returns (uint256) buyPrivateOffer function buyPrivateOffer(address _dao, uint256 _id) external returns (bool)","title":"IAuction"},{"location":"interfaces/IAuction/#iauction","text":"","title":"IAuction"},{"location":"interfaces/IAuction/#publicoffer","text":"struct PublicOffer { bool isActive; address currency; uint256 rate; }","title":"PublicOffer"},{"location":"interfaces/IAuction/#publicoffers","text":"function publicOffers(address _dao) external view returns (struct IAuction.PublicOffer)","title":"publicOffers"},{"location":"interfaces/IAuction/#privateoffer","text":"struct PrivateOffer { bool isActive; address recipient; address currency; uint256 currencyAmount; uint256 amount; }","title":"PrivateOffer"},{"location":"interfaces/IAuction/#privateoffers","text":"function privateOffers(address _dao, uint256 _index) external view returns (struct IAuction.PrivateOffer)","title":"privateOffers"},{"location":"interfaces/IAuction/#numberofprivateoffers","text":"function numberOfPrivateOffers(address _dao) external view returns (uint256)","title":"numberOfPrivateOffers"},{"location":"interfaces/IAuction/#buyprivateoffer","text":"function buyPrivateOffer(address _dao, uint256 _id) external returns (bool)","title":"buyPrivateOffer"},{"location":"interfaces/IDao/","text":"IDao name function name() external view returns (string) symbol function symbol() external view returns (string) govToken function govToken() external view returns (address) setGovToken function setGovToken(address _govToken) external returns (bool) burnGovToken function burnGovToken(address _recipient, uint256 _share, address[] _tokens) external returns (bool) quorum function quorum() external view returns (uint8) executedTx function executedTx(bytes32 _txHash) external view returns (bool) mintable function mintable() external view returns (bool) burnable function burnable() external view returns (bool) numberOfPermitted function numberOfPermitted() external view returns (uint256) numberOfAdapters function numberOfAdapters() external view returns (uint256) executePermitted function executePermitted(address _target, bytes _data, uint256 _value) external returns (bool) permittedSpaceId function permittedSpaceId() external returns (string)","title":"IDao"},{"location":"interfaces/IDao/#idao","text":"","title":"IDao"},{"location":"interfaces/IDao/#name","text":"function name() external view returns (string)","title":"name"},{"location":"interfaces/IDao/#symbol","text":"function symbol() external view returns (string)","title":"symbol"},{"location":"interfaces/IDao/#govtoken","text":"function govToken() external view returns (address)","title":"govToken"},{"location":"interfaces/IDao/#setgovtoken","text":"function setGovToken(address _govToken) external returns (bool)","title":"setGovToken"},{"location":"interfaces/IDao/#burngovtoken","text":"function burnGovToken(address _recipient, uint256 _share, address[] _tokens) external returns (bool)","title":"burnGovToken"},{"location":"interfaces/IDao/#quorum","text":"function quorum() external view returns (uint8)","title":"quorum"},{"location":"interfaces/IDao/#executedtx","text":"function executedTx(bytes32 _txHash) external view returns (bool)","title":"executedTx"},{"location":"interfaces/IDao/#mintable","text":"function mintable() external view returns (bool)","title":"mintable"},{"location":"interfaces/IDao/#burnable","text":"function burnable() external view returns (bool)","title":"burnable"},{"location":"interfaces/IDao/#numberofpermitted","text":"function numberOfPermitted() external view returns (uint256)","title":"numberOfPermitted"},{"location":"interfaces/IDao/#numberofadapters","text":"function numberOfAdapters() external view returns (uint256)","title":"numberOfAdapters"},{"location":"interfaces/IDao/#executepermitted","text":"function executePermitted(address _target, bytes _data, uint256 _value) external returns (bool)","title":"executePermitted"},{"location":"interfaces/IDao/#permittedspaceid","text":"function permittedSpaceId() external returns (string)","title":"permittedSpaceId"},{"location":"interfaces/IERC165/","text":"IERC165 supportsInterface function supportsInterface(bytes4 interfaceId) external view returns (bool)","title":"IERC165"},{"location":"interfaces/IERC165/#ierc165","text":"","title":"IERC165"},{"location":"interfaces/IERC165/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) external view returns (bool)","title":"supportsInterface"},{"location":"interfaces/IExitModule/","text":"IExitModule exit function exit(address _daoAddress, uint256 _offerId) external returns (bool success)","title":"IExitModule"},{"location":"interfaces/IExitModule/#iexitmodule","text":"","title":"IExitModule"},{"location":"interfaces/IExitModule/#exit","text":"function exit(address _daoAddress, uint256 _offerId) external returns (bool success)","title":"exit"},{"location":"interfaces/IFactory/","text":"IFactory getDaos function getDaos() external view returns (address[]) auction function auction() external view returns (address) monthlyCost function monthlyCost() external view returns (uint256) containsDao function containsDao(address _dao) external view returns (bool)","title":"IFactory"},{"location":"interfaces/IFactory/#ifactory","text":"","title":"IFactory"},{"location":"interfaces/IFactory/#getdaos","text":"function getDaos() external view returns (address[])","title":"getDaos"},{"location":"interfaces/IFactory/#auction","text":"function auction() external view returns (address)","title":"auction"},{"location":"interfaces/IFactory/#monthlycost","text":"function monthlyCost() external view returns (uint256)","title":"monthlyCost"},{"location":"interfaces/IFactory/#containsdao","text":"function containsDao(address _dao) external view returns (bool)","title":"containsDao"},{"location":"interfaces/IGovNFT/","text":"IGovToken name function name() external view returns (string) symbol function symbol() external view returns (string) mint function mint(address _to, uint256 _amount) external returns (bool) mintable function mintable() external view returns (bool) burnable function burnable() external view returns (bool) mintableStatusFrozen function mintableStatusFrozen() external view returns (bool) burnableStatusFrozen function burnableStatusFrozen() external view returns (bool) burn function burn(uint256 _amount, address[] _tokens) external returns (bool)","title":"IGovNFT"},{"location":"interfaces/IGovNFT/#igovtoken","text":"","title":"IGovToken"},{"location":"interfaces/IGovNFT/#name","text":"function name() external view returns (string)","title":"name"},{"location":"interfaces/IGovNFT/#symbol","text":"function symbol() external view returns (string)","title":"symbol"},{"location":"interfaces/IGovNFT/#mint","text":"function mint(address _to, uint256 _amount) external returns (bool)","title":"mint"},{"location":"interfaces/IGovNFT/#mintable","text":"function mintable() external view returns (bool)","title":"mintable"},{"location":"interfaces/IGovNFT/#burnable","text":"function burnable() external view returns (bool)","title":"burnable"},{"location":"interfaces/IGovNFT/#mintablestatusfrozen","text":"function mintableStatusFrozen() external view returns (bool)","title":"mintableStatusFrozen"},{"location":"interfaces/IGovNFT/#burnablestatusfrozen","text":"function burnableStatusFrozen() external view returns (bool)","title":"burnableStatusFrozen"},{"location":"interfaces/IGovNFT/#burn","text":"function burn(uint256 _amount, address[] _tokens) external returns (bool)","title":"burn"},{"location":"interfaces/IGovToken/","text":"IGovToken name function name() external view returns (string) symbol function symbol() external view returns (string) mint function mint(address _to, uint256 _amount) external returns (bool) mintable function mintable() external view returns (bool) burnable function burnable() external view returns (bool) mintableStatusFrozen function mintableStatusFrozen() external view returns (bool) burnableStatusFrozen function burnableStatusFrozen() external view returns (bool) burn function burn(uint256 _amount, address[] _tokens) external returns (bool)","title":"IGovToken"},{"location":"interfaces/IGovToken/#igovtoken","text":"","title":"IGovToken"},{"location":"interfaces/IGovToken/#name","text":"function name() external view returns (string)","title":"name"},{"location":"interfaces/IGovToken/#symbol","text":"function symbol() external view returns (string)","title":"symbol"},{"location":"interfaces/IGovToken/#mint","text":"function mint(address _to, uint256 _amount) external returns (bool)","title":"mint"},{"location":"interfaces/IGovToken/#mintable","text":"function mintable() external view returns (bool)","title":"mintable"},{"location":"interfaces/IGovToken/#burnable","text":"function burnable() external view returns (bool)","title":"burnable"},{"location":"interfaces/IGovToken/#mintablestatusfrozen","text":"function mintableStatusFrozen() external view returns (bool)","title":"mintableStatusFrozen"},{"location":"interfaces/IGovToken/#burnablestatusfrozen","text":"function burnableStatusFrozen() external view returns (bool)","title":"burnableStatusFrozen"},{"location":"interfaces/IGovToken/#burn","text":"function burn(uint256 _amount, address[] _tokens) external returns (bool)","title":"burn"},{"location":"mocks/Adapter/","text":"Adapter withdraw function withdraw(address, address, uint256) external pure returns (bool)","title":"Adapter"},{"location":"mocks/Adapter/#adapter","text":"","title":"Adapter"},{"location":"mocks/Adapter/#withdraw","text":"function withdraw(address, address, uint256) external pure returns (bool)","title":"withdraw"},{"location":"mocks/NamedNFT/","text":"NamedNFT constructor constructor(string _name, string _symbol) public","title":"NamedNFT"},{"location":"mocks/NamedNFT/#namednft","text":"","title":"NamedNFT"},{"location":"mocks/NamedNFT/#constructor","text":"constructor(string _name, string _symbol) public","title":"constructor"},{"location":"mocks/NamedToken/","text":"NamedToken constructor constructor(string _name, string _symbol) public","title":"NamedToken"},{"location":"mocks/NamedToken/#namedtoken","text":"","title":"NamedToken"},{"location":"mocks/NamedToken/#constructor","text":"constructor(string _name, string _symbol) public","title":"constructor"},{"location":"mocks/PayableFunction/","text":"PayableFunction hello function hello(uint256) external payable returns (bool)","title":"PayableFunction"},{"location":"mocks/PayableFunction/#payablefunction","text":"","title":"PayableFunction"},{"location":"mocks/PayableFunction/#hello","text":"function hello(uint256) external payable returns (bool)","title":"hello"},{"location":"mocks/Token/","text":"Token constructor constructor() public","title":"Token"},{"location":"mocks/Token/#token","text":"","title":"Token"},{"location":"mocks/Token/#constructor","text":"constructor() public","title":"constructor"},{"location":"modules/ExitModule/","text":"ExitModule exitOffer struct exitOffer { bool isActive; address recipient; uint256 amount; uint256 ethAmount; address[] tokenAddresses; uint256[] tokenAmounts; } exitOffers mapping(address => mapping(uint256 => struct ExitModule.exitOffer)) exitOffers numberOfPrivateOffers mapping(address => uint256) numberOfPrivateOffers Exit event Exit(address recipient, uint256 amount, uint256 ethAmount, address[] tokenAddresses, uint256[] tokenAmounts) createExitOffer function createExitOffer(address _recipient, uint256 _amount, uint256 _ethAmount, address[] _tokenAddresses, uint256[] _tokenAmounts) external returns (bool success) disableExitOffer function disableExitOffer(uint256 _offerId) external returns (bool success) exit function exit(address _daoAddress, uint256 _offerId) external returns (bool success) getOffers function getOffers(address _dao) external view returns (struct ExitModule.exitOffer[]) Received event Received(address, uint256) receive receive() external payable","title":"ExitModule"},{"location":"modules/ExitModule/#exitmodule","text":"","title":"ExitModule"},{"location":"modules/ExitModule/#exitoffer","text":"struct exitOffer { bool isActive; address recipient; uint256 amount; uint256 ethAmount; address[] tokenAddresses; uint256[] tokenAmounts; }","title":"exitOffer"},{"location":"modules/ExitModule/#exitoffers","text":"mapping(address => mapping(uint256 => struct ExitModule.exitOffer)) exitOffers","title":"exitOffers"},{"location":"modules/ExitModule/#numberofprivateoffers","text":"mapping(address => uint256) numberOfPrivateOffers","title":"numberOfPrivateOffers"},{"location":"modules/ExitModule/#exit","text":"event Exit(address recipient, uint256 amount, uint256 ethAmount, address[] tokenAddresses, uint256[] tokenAmounts)","title":"Exit"},{"location":"modules/ExitModule/#createexitoffer","text":"function createExitOffer(address _recipient, uint256 _amount, uint256 _ethAmount, address[] _tokenAddresses, uint256[] _tokenAmounts) external returns (bool success)","title":"createExitOffer"},{"location":"modules/ExitModule/#disableexitoffer","text":"function disableExitOffer(uint256 _offerId) external returns (bool success)","title":"disableExitOffer"},{"location":"modules/ExitModule/#exit_1","text":"function exit(address _daoAddress, uint256 _offerId) external returns (bool success)","title":"exit"},{"location":"modules/ExitModule/#getoffers","text":"function getOffers(address _dao) external view returns (struct ExitModule.exitOffer[])","title":"getOffers"},{"location":"modules/ExitModule/#received","text":"event Received(address, uint256)","title":"Received"},{"location":"modules/ExitModule/#receive","text":"receive() external payable","title":"receive"},{"location":"modules/LaunchpadModule/","text":"LaunchpadModule factory contract IFactory factory auction contract IAuction auction exitModule contract IExitModule exitModule Sale struct Sale { address currency; uint256 rate; bool isFinite; bool isLimitedTotalSaleAmount; bool isWhitelist; bool isAllocation; uint256 endTimestamp; uint256 totalSaleAmount; struct EnumerableSetUpgradeable.AddressSet whitelist; mapping(address => uint256) allocations; } sales mapping(address => mapping(uint256 => struct LaunchpadModule.Sale)) sales saleIndexes mapping(address => uint256) saleIndexes bought mapping(address => mapping(uint256 => mapping(address => bool))) bought totalBought mapping(address => mapping(uint256 => uint256)) totalBought InitSale event InitSale(address daoAddress, uint256 saleId, address currency, uint256 rate, bool[4] limits, uint256 _endTimestamp, uint256 _totalSaleAmount, address[] _addWhitelist, uint256[] _allocations, address[] _removeWhitelist) CloseSale event CloseSale(address daoAddress, uint256 saleId) Buy event Buy(address daoAddress, uint256 saleId, address buyer, uint256 currencyAmount, uint256 amount) constructor constructor() public initialize function initialize() public setCoreAddresses function setCoreAddresses(contract IFactory _factory, contract IAuction _auction, contract IExitModule _exitModule) external onlyDao modifier onlyDao() initSale function initSale(address _currency, uint256 _rate, bool[4] _limits, uint256 _endTimestamp, uint256 _totalSaleAmount, address[] _addWhitelist, uint256[] _allocations, address[] _removeWhitelist) external fillGovTokenBalance function fillGovTokenBalance(address _dao, uint256 _id) external closeSale function closeSale() external burnGovToken function burnGovToken(address _dao, uint256 _id) external buy function buy(address _dao, uint256 _currencyAmount) external SaleInfo struct SaleInfo { address currency; uint256 rate; bool isFinite; bool isLimitedTotalSaleAmount; bool isWhitelist; bool isAllocation; uint256 endTimestamp; uint256 totalSaleAmount; address[] whitelist; uint256[] allocations; } getSaleInfo function getSaleInfo(address _dao, uint256 _saleIndex) external view returns (struct LaunchpadModule.SaleInfo)","title":"LaunchpadModule"},{"location":"modules/LaunchpadModule/#launchpadmodule","text":"","title":"LaunchpadModule"},{"location":"modules/LaunchpadModule/#factory","text":"contract IFactory factory","title":"factory"},{"location":"modules/LaunchpadModule/#auction","text":"contract IAuction auction","title":"auction"},{"location":"modules/LaunchpadModule/#exitmodule","text":"contract IExitModule exitModule","title":"exitModule"},{"location":"modules/LaunchpadModule/#sale","text":"struct Sale { address currency; uint256 rate; bool isFinite; bool isLimitedTotalSaleAmount; bool isWhitelist; bool isAllocation; uint256 endTimestamp; uint256 totalSaleAmount; struct EnumerableSetUpgradeable.AddressSet whitelist; mapping(address => uint256) allocations; }","title":"Sale"},{"location":"modules/LaunchpadModule/#sales","text":"mapping(address => mapping(uint256 => struct LaunchpadModule.Sale)) sales","title":"sales"},{"location":"modules/LaunchpadModule/#saleindexes","text":"mapping(address => uint256) saleIndexes","title":"saleIndexes"},{"location":"modules/LaunchpadModule/#bought","text":"mapping(address => mapping(uint256 => mapping(address => bool))) bought","title":"bought"},{"location":"modules/LaunchpadModule/#totalbought","text":"mapping(address => mapping(uint256 => uint256)) totalBought","title":"totalBought"},{"location":"modules/LaunchpadModule/#initsale","text":"event InitSale(address daoAddress, uint256 saleId, address currency, uint256 rate, bool[4] limits, uint256 _endTimestamp, uint256 _totalSaleAmount, address[] _addWhitelist, uint256[] _allocations, address[] _removeWhitelist)","title":"InitSale"},{"location":"modules/LaunchpadModule/#closesale","text":"event CloseSale(address daoAddress, uint256 saleId)","title":"CloseSale"},{"location":"modules/LaunchpadModule/#buy","text":"event Buy(address daoAddress, uint256 saleId, address buyer, uint256 currencyAmount, uint256 amount)","title":"Buy"},{"location":"modules/LaunchpadModule/#constructor","text":"constructor() public","title":"constructor"},{"location":"modules/LaunchpadModule/#initialize","text":"function initialize() public","title":"initialize"},{"location":"modules/LaunchpadModule/#setcoreaddresses","text":"function setCoreAddresses(contract IFactory _factory, contract IAuction _auction, contract IExitModule _exitModule) external","title":"setCoreAddresses"},{"location":"modules/LaunchpadModule/#onlydao","text":"modifier onlyDao()","title":"onlyDao"},{"location":"modules/LaunchpadModule/#initsale_1","text":"function initSale(address _currency, uint256 _rate, bool[4] _limits, uint256 _endTimestamp, uint256 _totalSaleAmount, address[] _addWhitelist, uint256[] _allocations, address[] _removeWhitelist) external","title":"initSale"},{"location":"modules/LaunchpadModule/#fillgovtokenbalance","text":"function fillGovTokenBalance(address _dao, uint256 _id) external","title":"fillGovTokenBalance"},{"location":"modules/LaunchpadModule/#closesale_1","text":"function closeSale() external","title":"closeSale"},{"location":"modules/LaunchpadModule/#burngovtoken","text":"function burnGovToken(address _dao, uint256 _id) external","title":"burnGovToken"},{"location":"modules/LaunchpadModule/#buy_1","text":"function buy(address _dao, uint256 _currencyAmount) external","title":"buy"},{"location":"modules/LaunchpadModule/#saleinfo","text":"struct SaleInfo { address currency; uint256 rate; bool isFinite; bool isLimitedTotalSaleAmount; bool isWhitelist; bool isAllocation; uint256 endTimestamp; uint256 totalSaleAmount; address[] whitelist; uint256[] allocations; }","title":"SaleInfo"},{"location":"modules/LaunchpadModule/#getsaleinfo","text":"function getSaleInfo(address _dao, uint256 _saleIndex) external view returns (struct LaunchpadModule.SaleInfo)","title":"getSaleInfo"},{"location":"modules/OffchainVotingModule/","text":"OffchainVotingModule permitted struct EnumerableSet.AddressSet permitted executedTx mapping(bytes32 => bool) executedTx Proposal struct Proposal { bool isActive; address target; bytes data; uint256 value; uint256 nonce; uint256 timestamp; } proposals mapping(address => mapping(uint256 => struct OffchainVotingModule.Proposal)) proposals numberOfProposals mapping(address => uint256) numberOfProposals OffChainVotingExecuted event OffChainVotingExecuted(uint256 amount, uint256 ethAmount, address[] tokenAddresses, uint256[] tokenAmounts) constructor constructor() public createProposal function createProposal(address _daoAddress, address _target, bytes _data, uint256 _value, uint256 _nonce, uint256 _timestamp, bytes _sig, string _spaceId) external returns (bool) disableProposal function disableProposal(uint256 _proposalId) external returns (bool) getProposals function getProposals(address _dao) external view returns (struct OffchainVotingModule.Proposal[]) execute function execute(address _daoAddress, uint256 _proposalId) external returns (bool) createAndExecute function createAndExecute(address _daoAddress, address _target, bytes _data, uint256 _value, uint256 _nonce, uint256 _timestamp, bytes _sig, string _spaceId) external returns (bool) getTxHash function getTxHash(address _target, bytes _data, uint256 _value, uint256 _nonce, uint256 _timestamp) public view returns (bytes32) _checkSig function _checkSig(bytes _sig, bytes32 _txHash) internal view returns (bool) onlyPermitted modifier onlyPermitted() addPermitted function addPermitted(address p) external returns (bool) removePermitted function removePermitted(address p) external returns (bool) numberOfPermitted function numberOfPermitted() external view returns (uint256) containsPermitted function containsPermitted(address p) external view returns (bool) getPermitted function getPermitted() external view returns (address[]) Received event Received(address, uint256) receive receive() external payable","title":"OffchainVotingModule"},{"location":"modules/OffchainVotingModule/#offchainvotingmodule","text":"","title":"OffchainVotingModule"},{"location":"modules/OffchainVotingModule/#permitted","text":"struct EnumerableSet.AddressSet permitted","title":"permitted"},{"location":"modules/OffchainVotingModule/#executedtx","text":"mapping(bytes32 => bool) executedTx","title":"executedTx"},{"location":"modules/OffchainVotingModule/#proposal","text":"struct Proposal { bool isActive; address target; bytes data; uint256 value; uint256 nonce; uint256 timestamp; }","title":"Proposal"},{"location":"modules/OffchainVotingModule/#proposals","text":"mapping(address => mapping(uint256 => struct OffchainVotingModule.Proposal)) proposals","title":"proposals"},{"location":"modules/OffchainVotingModule/#numberofproposals","text":"mapping(address => uint256) numberOfProposals","title":"numberOfProposals"},{"location":"modules/OffchainVotingModule/#offchainvotingexecuted","text":"event OffChainVotingExecuted(uint256 amount, uint256 ethAmount, address[] tokenAddresses, uint256[] tokenAmounts)","title":"OffChainVotingExecuted"},{"location":"modules/OffchainVotingModule/#constructor","text":"constructor() public","title":"constructor"},{"location":"modules/OffchainVotingModule/#createproposal","text":"function createProposal(address _daoAddress, address _target, bytes _data, uint256 _value, uint256 _nonce, uint256 _timestamp, bytes _sig, string _spaceId) external returns (bool)","title":"createProposal"},{"location":"modules/OffchainVotingModule/#disableproposal","text":"function disableProposal(uint256 _proposalId) external returns (bool)","title":"disableProposal"},{"location":"modules/OffchainVotingModule/#getproposals","text":"function getProposals(address _dao) external view returns (struct OffchainVotingModule.Proposal[])","title":"getProposals"},{"location":"modules/OffchainVotingModule/#execute","text":"function execute(address _daoAddress, uint256 _proposalId) external returns (bool)","title":"execute"},{"location":"modules/OffchainVotingModule/#createandexecute","text":"function createAndExecute(address _daoAddress, address _target, bytes _data, uint256 _value, uint256 _nonce, uint256 _timestamp, bytes _sig, string _spaceId) external returns (bool)","title":"createAndExecute"},{"location":"modules/OffchainVotingModule/#gettxhash","text":"function getTxHash(address _target, bytes _data, uint256 _value, uint256 _nonce, uint256 _timestamp) public view returns (bytes32)","title":"getTxHash"},{"location":"modules/OffchainVotingModule/#_checksig","text":"function _checkSig(bytes _sig, bytes32 _txHash) internal view returns (bool)","title":"_checkSig"},{"location":"modules/OffchainVotingModule/#onlypermitted","text":"modifier onlyPermitted()","title":"onlyPermitted"},{"location":"modules/OffchainVotingModule/#addpermitted","text":"function addPermitted(address p) external returns (bool)","title":"addPermitted"},{"location":"modules/OffchainVotingModule/#removepermitted","text":"function removePermitted(address p) external returns (bool)","title":"removePermitted"},{"location":"modules/OffchainVotingModule/#numberofpermitted","text":"function numberOfPermitted() external view returns (uint256)","title":"numberOfPermitted"},{"location":"modules/OffchainVotingModule/#containspermitted","text":"function containsPermitted(address p) external view returns (bool)","title":"containsPermitted"},{"location":"modules/OffchainVotingModule/#getpermitted","text":"function getPermitted() external view returns (address[])","title":"getPermitted"},{"location":"modules/OffchainVotingModule/#received","text":"event Received(address, uint256)","title":"Received"},{"location":"modules/OffchainVotingModule/#receive","text":"receive() external payable","title":"receive"},{"location":"viewers/AdvancedViewer/","text":"AdvancedViewer factory address factory constructor constructor(address _factory) public userDaos function userDaos(uint256 start, uint256 end, address user) external view returns (address[])","title":"AdvancedViewer"},{"location":"viewers/AdvancedViewer/#advancedviewer","text":"","title":"AdvancedViewer"},{"location":"viewers/AdvancedViewer/#factory","text":"address factory","title":"factory"},{"location":"viewers/AdvancedViewer/#constructor","text":"constructor(address _factory) public","title":"constructor"},{"location":"viewers/AdvancedViewer/#userdaos","text":"function userDaos(uint256 start, uint256 end, address user) external view returns (address[])","title":"userDaos"},{"location":"viewers/DaoViewer/","text":"DaoViewer DaoInfo struct DaoInfo { address dao; string daoName; string daoSymbol; address govToken; string name; string symbol; } getDao function getDao(address _dao) public view returns (struct DaoViewer.DaoInfo) getDaos function getDaos(address _factory) public view returns (struct DaoViewer.DaoInfo[]) userDaos function userDaos(address _user, address _factory) external view returns (struct DaoViewer.DaoInfo[]) balances function balances(address[] users, address[] tokens) external view returns (uint256[]) DaoConfiguration struct DaoConfiguration { bool gtMintable; bool gtBurnable; address govTokenAddress; bool govTokenMintable; bool govTokenBurnable; bool govTokenMintableStatusFrozen; bool govTokenBurnableStatusFrozen; uint256 permittedLength; uint256 adaptersLength; uint256 numberOfPrivateOffers; } getDaoConfiguration function getDaoConfiguration(address _factory, address _dao) external view returns (struct DaoViewer.DaoConfiguration) getInvestInfo function getInvestInfo(address _factory) external view returns (struct DaoViewer.DaoInfo[], struct IAuction.PublicOffer[], string[], uint8[], uint256[]) getPrivateOffersInfo function getPrivateOffersInfo(address _factory) external view returns (struct DaoViewer.DaoInfo[], uint256[], struct IAuction.PrivateOffer[], string[], uint8[])","title":"DaoViewer"},{"location":"viewers/DaoViewer/#daoviewer","text":"","title":"DaoViewer"},{"location":"viewers/DaoViewer/#daoinfo","text":"struct DaoInfo { address dao; string daoName; string daoSymbol; address govToken; string name; string symbol; }","title":"DaoInfo"},{"location":"viewers/DaoViewer/#getdao","text":"function getDao(address _dao) public view returns (struct DaoViewer.DaoInfo)","title":"getDao"},{"location":"viewers/DaoViewer/#getdaos","text":"function getDaos(address _factory) public view returns (struct DaoViewer.DaoInfo[])","title":"getDaos"},{"location":"viewers/DaoViewer/#userdaos","text":"function userDaos(address _user, address _factory) external view returns (struct DaoViewer.DaoInfo[])","title":"userDaos"},{"location":"viewers/DaoViewer/#balances","text":"function balances(address[] users, address[] tokens) external view returns (uint256[])","title":"balances"},{"location":"viewers/DaoViewer/#daoconfiguration","text":"struct DaoConfiguration { bool gtMintable; bool gtBurnable; address govTokenAddress; bool govTokenMintable; bool govTokenBurnable; bool govTokenMintableStatusFrozen; bool govTokenBurnableStatusFrozen; uint256 permittedLength; uint256 adaptersLength; uint256 numberOfPrivateOffers; }","title":"DaoConfiguration"},{"location":"viewers/DaoViewer/#getdaoconfiguration","text":"function getDaoConfiguration(address _factory, address _dao) external view returns (struct DaoViewer.DaoConfiguration)","title":"getDaoConfiguration"},{"location":"viewers/DaoViewer/#getinvestinfo","text":"function getInvestInfo(address _factory) external view returns (struct DaoViewer.DaoInfo[], struct IAuction.PublicOffer[], string[], uint8[], uint256[])","title":"getInvestInfo"},{"location":"viewers/DaoViewer/#getprivateoffersinfo","text":"function getPrivateOffersInfo(address _factory) external view returns (struct DaoViewer.DaoInfo[], uint256[], struct IAuction.PrivateOffer[], string[], uint8[])","title":"getPrivateOffersInfo"}]}